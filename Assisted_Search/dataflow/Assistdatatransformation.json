{
	"name": "Assistdatatransformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DestinationDataset_kht",
						"type": "DatasetReference"
					},
					"name": "Scrapeddata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AssistedParquet",
						"type": "DatasetReference"
					},
					"name": "assistsink",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "RemoveemptyColumns"
				},
				{
					"name": "TrimWhitespace"
				},
				{
					"name": "StandardizeKeys"
				},
				{
					"name": "Removeemptyvalues"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Column1 as string,",
				"          Column2 as string,",
				"          Column3 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> Scrapeddata",
				"Scrapeddata select(mapColumn(",
				"          Column2,",
				"          Column3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveemptyColumns",
				"Removeemptyvalues derive(Column2 = trim(Column2),",
				"          Column3 = trim(Column3)) ~> TrimWhitespace",
				"TrimWhitespace derive(Column2 = lower(replace(replace(Column2, ' ', '_'), '-', '_')),",
				"          Column3 = lower(replace(replace(Column3, ' ', '_'), '-', '_'))) ~> StandardizeKeys",
				"RemoveemptyColumns filter(!isNull(Column2) && Column2 != '' && !isNull(Column3) && Column3 != '') ~> Removeemptyvalues",
				"StandardizeKeys sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          columns2 = Column2,",
				"          Column3",
				"     ),",
				"     partitionBy('roundRobin', 2)) ~> assistsink"
			]
		}
	}
}